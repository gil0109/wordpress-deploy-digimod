kind: Template
apiVersion: v1
name: wordpress_deployment
parameters:

  - name: APP_NAME
    displayName: "App Name"
    description: "The name of the application (grouped)."
    required: true
    value: "wordpress"
  - name: APP_DOMAIN
    displayName: "Application Hostname"
    description: "The exposed hostname that will route to the the application."
    value: "wpp-dev.apps.silver.devops.gov.bc.ca"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "e49a54"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "test"
  - name: SITE_NAME
    displayName: "Site name"
    description: "The name for the site (a-zA-Z_)"
    required: true
    value: "payments"

# NGINX

  - name: NGINX_ROLE_NAME
    displayName: "Component Name"
    description: "The name of the application role."
    required: true
    value: "nginx"

  - name: INSTANCE
    displayName: "Unique Identifier"
    description: "A unique identifier to allow for multiple instances (i.e. '-01')."
    value: ""
  - name: NGINX_APP_PORT
    displayName: "Application Port"
    description: "The port used to communicate with the Pod"
    value: "8080"

# CONFIG
  - name: WORDPRESS_MULTISITE
    displayName: "WORDPRESS_MULTISITE"
    description: "Set to 1 to enable multisite, 0 to disable.  IMPORTANT, it has to be 0 for initial setup."
    required: true
    value: ""
  - name: CONFIG_ROLE_NAME
    displayName: "Component Name"
    description: "The name of the application role."
    required: true
    value: "config"

# port 3306

  - name: PORT3306
    displayName: "Port number"
    description: "Port number"
    required: true
    value: "3306"
  - name: PROTOCOL
    displayName: "Protocol name lowercase"
    description: "The protocol name [tcp, udp]"
    required: true
    value: "tcp"
  - name: PROTOCOL_U
    displayName: "The same protocol name, but uppercase."
    description: "The protocol name [TCP, UDP]"
    required: true
    value: "TCP"

#port 9000

  - name: PORT9000
    displayName: "Port number"
    description: "Port number"
    required: true
    value: "9000"

# Wordpress

  - name: WORDPRESS_ROLE_NAME
    displayName: "Component Name"
    description: "The name of the application role."
    required: true
    value: "wordpress"
  - name: WORDPRESS_VOLUME_SIZE
    displayName: "Volume size"
    description: "The Volume size ie 5Gi"
    required: true
    value: "5Gi"

  - name: PHP_APP_PORT
    displayName: "Application Port"
    description: "The port used to communicate with the Pod"
    value: "9000"
  - name: REPLICAS
    displayName: "Pod Replicas"
    description: "Number of pod replicas to run"
    value: "1"
  - name: WORDPRESS_CPU_REQUEST
    displayName: "CPU Request"
    description: "Starting amount of CPU the container can use."
    value: "100m"
  - name: WORDPRESS_CPU_LIMIT
    displayName: "CPU Limit"
    description: "Maximum amount of CPU the container can use."
    value: "400m"
  - name: WORDPRESS_MEMORY_REQUEST
    displayName: "Memory Request"
    description: "Starting amount of memory the container can use."
    value: "250Mi"
  - name: WORDPRESS_MEMORY_LIMIT
    displayName: "Memory Limit"
    description: "Maximum amount of memory the container can use."
    value: "500Mi"
  - name: WORDPRESS_VOLUME_NAME
    displayName: "Volume Name"
    description: "Leave blank for normal volume or add -backup for backup volume"
    value: "" # Use -p WORDPRESS_VOLUME_NAME="-backup" to mount backup volume.


  - name: WORDPRESS_NONCE_SALT
    displayName: "WORDPRESS_NONCE_SALT"
    description: "Unique nonce salt."
    generate: expression
    from: "[a-zA-Z0-9]{42}"
  - name: WORDPRESS_AUTH_KEY
    displayName: "WORDPRESS_AUTH_KEY"
    description: "WORDPRESS_AUTH_KEY"
    generate: expression
    from: "[a-zA-Z0-9]{42}"
  - name: WORDPRESS_SECURE_AUTH_KEY
    displayName: "WORDPRESS_SECURE_AUTH_KEY"
    description: "WORDPRESS_SECURE_AUTH_KEY"
    generate: expression
    from: "[a-zA-Z0-9]{42}"
  - name: WORDPRESS_LOGGED_IN_KEY
    displayName: "WORDPRESS_LOGGED_IN_KEY"
    description: "WORDPRESS_LOGGED_IN_KEY"
    generate: expression
    from: "[a-zA-Z0-9]{42}"
  - name: WORDPRESS_NONCE_KEY
    displayName: "WORDPRESS_NONCE_KEY"
    description: "WORDPRESS_NONCE_KEY"
    generate: expression
    from: "[a-zA-Z0-9]{42}"
  - name: WORDPRESS_AUTH_SALT
    displayName: "WORDPRESS_AUTH_SALT"
    description: "WORDPRESS_AUTH_SALT"
    generate: expression
    from: "[a-zA-Z0-9]{42}"
  - name: WORDPRESS_SECURE_AUTH_SALT
    displayName: "WORDPRESS_SECURE_AUTH_SALT"
    description: "WORDPRESS_SECURE_AUTH_SALT"
    generate: expression
    from: "[a-zA-Z0-9]{42}"
  - name: WORDPRESS_LOGGED_IN_SALT
    displayName: "WORDPRESS_LOGGED_IN_SALT"
    description: "WORDPRESS_LOGGED_IN_SALT"
    generate: expression
    from: "[a-zA-Z0-9]{42}"

objects:

# Wordpress

  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${APP_NAME}-${NGINX_ROLE_NAME}-${SITE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"${APP_NAME}-wordpress-run:${ENV_NAME}","namespace": "${PROJECT_NAMESPACE}-tools"},"fieldPath":"spec.template.spec.containers[?(@.name==\"${APP_NAME}-wordpress-${SITE_NAME}\")].image"},{"from":{"kind":"ImageStreamTag","name":"${APP_NAME}-nginx-run:${ENV_NAME}","namespace": "${PROJECT_NAMESPACE}-tools"},"fieldPath":"spec.template.spec.containers[?(@.name==\"${APP_NAME}-nginx-${SITE_NAME}\")].image"}]
      labels:
        app.kubernetes.io/part-of: ${APP_NAME}
        app.openshift.io/runtime: nginx
        app.kubernetes.io/component: nginx
        app.kubernetes.io/instance: webserver

    spec:
      selector:
        matchLabels:
          name: ${APP_NAME}-${NGINX_ROLE_NAME}-${SITE_NAME}
          app: ${APP_NAME}
          role: ${NGINX_ROLE_NAME}
          env: ${ENV_NAME}
          site: ${SITE_NAME}
      strategy:
        type: RollingUpdate
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        resources: {}
        activeDeadlineSeconds: 21600
      template:
        metadata:
          annotations:
            alpha.image.policy.openshift.io/resolve-names: '*'
          labels:
            name: ${APP_NAME}-${NGINX_ROLE_NAME}-${SITE_NAME}
            app: ${APP_NAME}
            role: ${NGINX_ROLE_NAME}
            env: ${ENV_NAME}
            site: ${SITE_NAME}
            net-tcp-8080: "server"
            net-tcp-9000: "client"
        spec:
          triggers:
            - type: "ConfigChange"

          volumes:
            - name: nginx-configmap-volume
              configMap:
                name: ${APP_NAME}-config-${SITE_NAME}
                items:
                  - key: nginx.conf
                    path: nginx.conf
                defaultMode: 420
            - name: wordpress-htdocs
              emptyDir: {}
            - name: wordpress-volume
              persistentVolumeClaim:
                claimName: ${APP_NAME}-wordpress-${POOL_NAME}
            - name: php-fpm-configmap-volume
              configMap:
                name: ${APP_NAME}-config-${SITE_NAME}
                items:
                  - key: app.ini
                    path: app.ini
                defaultMode: 420
            - name: php-fpm-secrets-volume
              secret:
                secretName: ${APP_NAME}-php-fpm-secrets-${SITE_NAME}
                defaultMode: 420
            - name: mariadb-secrets-volume
              secret:
                secretName: ${APP_NAME}-mariadb-secrets-${SITE_NAME}
                items:
                  - key: MYSQL_PASSWORD
                    path: MYSQL_PASSWORD
                defaultMode: 420
          containers:
            - name: ${APP_NAME}-wordpress-${SITE_NAME}
              image: image-registry.openshift-image-registry.svc:5000/${PROJECT_NAMESPACE}-tools/${APP_NAME}-wordpress-run:${ENV_NAME}
              wordpress-wordpress-run:
                openshift:dev:
              imagePullPolicy: Always
              ports:
                - name: ${PHP_APP_PORT}-tcp
                  containerPort: ${{PHP_APP_PORT}}
                  protocol: TCP
              volumeMounts:
                - name: wordpress-htdocs
                  mountPath: /var/www/html
                - name: php-fpm-configmap-volume
                  mountPath: /usr/local/etc/php/conf.d/zzz-app.ini
                  subPath: app.ini
                  # The entire php-fpm-secrets gets loaded into the specified directory. wp-config-docker.php is going to pick them up.
                - name: php-fpm-secrets-volume
                  readOnly: true
                  mountPath: /run/secrets/wordpress
                - name: mariadb-secrets-volume
                  readOnly: true
                  mountPath: /run/secrets/WORDPRESS_DB_PASSWORD
                  subPath: MYSQL_PASSWORD
                - name: wordpress-volume
                  mountPath: /var/www/html/wp-content/
                  subPath: ${SITE_NAME}/wp-content
              env:
                - name: WORDPRESS_DB_USER
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-config-${SITE_NAME}
                      key: MYSQL_USER
                - name: WORDPRESS_DB_NAME
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-config-${SITE_NAME}
                      key: MYSQL_DATABASE
              envFrom:
                # There are a bunch of password-file directives in the specified configmap, and they all get loaded into the environment for wp-config-docker.php to pick up.
                - configMapRef:
                    name: ${APP_NAME}-config-${SITE_NAME}
              terminationMessagePolicy: File
              terminationMessagePath: /dev/termination-log
              resources:
                requests:
                  cpu: ${WORDPRESS_CPU_REQUEST}
                  memory: ${WORDPRESS_MEMORY_REQUEST}
                limits:
                  cpu: ${WORDPRESS_CPU_LIMIT}
                  memory: ${WORDPRESS_MEMORY_LIMIT}
            - name: ${APP_NAME}-nginx-${SITE_NAME}
              image: image-registry.openshift-image-registry.svc:5000/${PROJECT_NAMESPACE}-tools/${APP_NAME}-nginx-run:${ENV_NAME}
              imagePullPolicy: Always
              ports:
                - name: ${NGINX_APP_PORT}-tcp
                  containerPort: ${{NGINX_APP_PORT}}
                  protocol: TCP
              volumeMounts:
                - name: wordpress-htdocs
                  mountPath: /var/www/html
                - name: wordpress-volume
                  mountPath: /var/www/html/wp-content/
                  subPath: ${SITE_NAME}/wp-content
                - name: nginx-configmap-volume
                  mountPath: /etc/nginx/conf.d/nginx.conf
                  subPath: nginx.conf
              terminationMessagePolicy: File
              terminationMessagePath: /dev/termination-log
              resources:
                requests:
                  cpu: ${WORDPRESS_CPU_REQUEST}
                  memory: ${WORDPRESS_MEMORY_REQUEST}
                limits:
                  cpu: ${WORDPRESS_CPU_LIMIT}
                  memory: ${WORDPRESS_MEMORY_LIMIT}
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: { }
          schedulerName: default-scheduler

  - kind: "PersistentVolumeClaim"
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${WORDPRESS_ROLE_NAME}-${POOL_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
    spec:
      accessModes:
        - "ReadWriteMany"
      resources:
        requests:
          storage: "${WORDPRESS_VOLUME_SIZE}"
      storageClassName: netapp-file-backup
      volumeMode: Filesystem

  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-secrets-${SITE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "wordpress secrets"
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-secrets-${SITE_NAME}
        app: ${APP_NAME}
        env: ${ENV_NAME}
        site: ${SITE_NAME}
    type: Opaque
    stringData:
      WORDPRESS_AUTH_KEY: ${WORDPRESS_AUTH_KEY}
      WORDPRESS_SECURE_AUTH_KEY: ${WORDPRESS_SECURE_AUTH_KEY}
      WORDPRESS_LOGGED_IN_KEY: ${WORDPRESS_LOGGED_IN_KEY}
      WORDPRESS_NONCE_KEY: ${WORDPRESS_NONCE_KEY}
      WORDPRESS_AUTH_SALT: ${WORDPRESS_AUTH_SALT}
      WORDPRESS_SECURE_AUTH_SALT: ${WORDPRESS_SECURE_AUTH_SALT}
      WORDPRESS_LOGGED_IN_SALT: ${WORDPRESS_LOGGED_IN_SALT}
      WORDPRESS_NONCE_SALT: ${WORDPRESS_NONCE_SALT}

# NGINX

  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${NGINX_ROLE_NAME}-${SITE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Exposes and load balances the application pods.
      labels:
        name: ${APP_NAME}-${NGINX_ROLE_NAME}-${SITE_NAME}
        app: ${APP_NAME}
        role: ${NGINX_ROLE_NAME}
        env: ${ENV_NAME}
        site: ${SITE_NAME}
    spec:
      ports:
        - name: ${NGINX_APP_PORT}-tcp
          port: ${{NGINX_APP_PORT}}
          protocol: TCP
          targetPort: ${{NGINX_APP_PORT}}
      selector:
        name: ${APP_NAME}-${NGINX_ROLE_NAME}-${SITE_NAME}
        app: ${APP_NAME}
        role: ${NGINX_ROLE_NAME}
        env: ${ENV_NAME}
        site: ${SITE_NAME}
      sessionAffinity: None
      type: ClusterIP

  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${NGINX_ROLE_NAME}-${SITE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${APP_NAME}-${NGINX_ROLE_NAME}-${SITE_NAME}
        app: ${APP_NAME}
        role: ${NGINX_ROLE_NAME}
        env: ${ENV_NAME}
        site: ${SITE_NAME}
      annotations:
        description: The Route for the ${APP_NAME} application for ${SITE_NAME} in ${ENV_NAME}
    spec:
      host: ${APP_DOMAIN}
      wildcardPolicy: None
      port:
        targetPort: ${NGINX_APP_PORT}-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
        caCertificate: ""
        certificate: ""
        key: ""
      to:
        kind: Service
        name: ${APP_NAME}-${NGINX_ROLE_NAME}-${SITE_NAME}
        weight: 100

#CONFIG MAP

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${CONFIG_ROLE_NAME}-${SITE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "WordPress configurations"
      labels:
        name: ${APP_NAME}-${CONFIG_ROLE_NAME}-env-config-${SITE_NAME}
        app: ${APP_NAME}
        env: ${ENV_NAME}
        site: ${SITE_NAME}
    data:
      # Database
      MYSQL_USER: ${SITE_NAME}_user
      MYSQL_DATABASE: ${SITE_NAME}_${ENV_NAME}
      # Backups
      backup.conf: "mariadb=${APP_NAME}-mariadb-${SITE_NAME}:3306/${SITE_NAME}_${ENV_NAME}"
      nginx.conf: |-
        # Extra ngix configs.
      # WordPress
      WORDPRESS_DB_HOST: ${APP_NAME}-mariadb-${SITE_NAME}
      WORDPRESS_DB_PASSWORD_FILE: /run/secrets/WORDPRESS_DB_PASSWORD
      WORDPRESS_CONFIG_EXTRA: |-
        /* Multisite */
        define( 'WP_ALLOW_MULTISITE', true );
        define( 'MULTISITE', !!filter_var( getenv_docker( 'WORDPRESS_MULTISITE', '0' ), FILTER_VALIDATE_BOOLEAN ) );
        define( 'SUBDOMAIN_INSTALL', false );
        define( 'DOMAIN_CURRENT_SITE', '${APP_DOMAIN}' );
        define( 'PATH_CURRENT_SITE', '/' );
        define( 'SITE_ID_CURRENT_SITE', intval( getenv_docker( 'WORDPRESS_SITE_ID_CURRENT_SITE', '1' ) ) );
        define( 'BLOG_ID_CURRENT_SITE', intval( getenv_docker( 'WORDPRESS_SITE_ID_CURRENT_SITE', '1' ) ) );
        /* For Active Directory Integration on Multisite. */
        define( 'IS_WPMU', true );
        /* Other configs */
        define( 'WP_DEBUG_LOG', false );
      WORDPRESS_AUTH_KEY_FILE: /run/secrets/wordpress/WORDPRESS_AUTH_KEY
      WORDPRESS_AUTH_SALT_FILE: /run/secrets/wordpress/WORDPRESS_AUTH_SALT
      WORDPRESS_LOGGED_IN_KEY_FILE: /run/secrets/wordpress/WORDPRESS_LOGGED_IN_KEY
      WORDPRESS_LOGGED_IN_SALT_FILE: /run/secrets/wordpress/WORDPRESS_LOGGED_IN_SALT
      WORDPRESS_NONCE_KEY_FILE: /run/secrets/wordpress/WORDPRESS_NONCE_KEY
      WORDPRESS_NONCE_SALT_FILE: /run/secrets/wordpress/WORDPRESS_NONCE_SALT
      WORDPRESS_SECURE_AUTH_KEY_FILE: /run/secrets/wordpress/WORDPRESS_SECURE_AUTH_KEY
      WORDPRESS_SECURE_AUTH_SALT_FILE: /run/secrets/wordpress/WORDPRESS_SECURE_AUTH_SALT
       # PHP configuration [to be moved to image build]
      app.ini: |-
        upload_max_filesize=${MAX_FILE_SIZE}
        post_max_size=${MAX_FILE_SIZE}
        memory_limit=256M
        max_execution_time=300
        max_input_time=300
      # Maria DB configuration [to be moved to image build]
      my.cnf: |-
        [mariadb]
        innodb_buffer_pool_size = 10M
        innodb_log_buffer_size = 512K # default / 2
        innodb_log_file_size = 8M
        lower_case_table_names = 1
        key_buffer_size = 4194304 # default / 2
      # Ngnix configuration [to be moved to image build]
      default.conf: |-
        server {
          index index.php index.html;
          server_name localhost;
          #listen 8443 ssl;
          listen 8080;
          error_log  /dev/stderr;
          access_log /dev/stdout;
          root /var/www/html/;
          # Sets Nginx max file upload size;
          client_max_body_size 1000M;
          location ~ /\. {
              return 404;
              deny all;
          }
          location / {
              try_files $uri $uri/ /index.php?$args; 
          }
          # Required for multi-site wp-admin.
          if (!-e $request_filename) {
              rewrite /wp-admin$ $scheme://$host$uri/ permanent;  
              rewrite ^(/[^/]+)?(/wp-.*) $2 last;                     
              rewrite ^(/[^/]+)?(/.*.php) $2 last;                   
          }
          location /nginx_status {
              stub_status on;
              access_log off;
              log_not_found off;
              allow 127.0.0.1;
              deny all;
          }
          location ~ \.php$ {
              try_files $uri =404;
              fastcgi_split_path_info ^(.+\.php)(/.+)$;
              fastcgi_pass 127.0.0.1:9000;
              fastcgi_index index.php;
              include fastcgi_params;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_param PATH_INFO $fastcgi_path_info;
              fastcgi_param SERVER_NAME $server_name; 
          }
        }

# NETWORKING POLICY

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-from-openshift-ingress
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
    spec:
      podSelector: {}
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
      policyTypes:
        - Ingress

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-${PROTOCOL}-port-${PORT3306}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
    spec:
      podSelector:
        matchLabels:
          net-${PROTOCOL}-${PORT3306}: "server"
      ingress:
      - from:
        - podSelector:
            matchLabels:
              net-${PROTOCOL}-${PORT3306}: "client"
        ports:
        - protocol: ${PROTOCOL_U}
          port: ${{PORT3306}}

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-${PROTOCOL}-port-${PORT9000}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
    spec:
      podSelector:
        matchLabels:
          net-${PROTOCOL}-${PORT9000}: "server"
      ingress:
      - from:
        - podSelector:
            matchLabels:
              net-${PROTOCOL}-${PORT9000}: "client"
        ports:
        - protocol: ${PROTOCOL_U}
          port: ${{PORT9000}}