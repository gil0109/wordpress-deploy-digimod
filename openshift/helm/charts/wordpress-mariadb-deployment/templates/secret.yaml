apiVersion: v1
kind: Secret
metadata:
  annotations:
    description: Database secrets
  labels:
    app: {{ .Values.app_name }}
    env: {{ .Values.env_name }}
    name: {{ .Values.app_name }}-{{ .Values.role_name }}-secrets--{{ .Values.site_name }}
    site: {{ .Values.site_name }}
  name: {{ .Values.app_name }}-{{ .Values.role_name }}-secrets--{{ .Values.site_name }}
  namespace: {{ .Values.project_namespace }}-{{ .Values.env_name }}
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "MYSQL_PASSWORD") | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $jwtSecret to existing secret data or generate a random one when not exists
  {{- $jwtSecret := (get $secretData "MYSQL_PASSWORD") | default (randAlphaNum 32 | b64enc) }}
  MYSQL_PASSWORD: {{ $jwtSecret | quote }}

  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "MYSQL_ROOT_PASSWORD") | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $jwtSecret to existing secret data or generate a random one when not exists
  {{- $jwtSecret := (get $secretData "MYSQL_ROOT_PASSWORD") | default (randAlphaNum 32 | b64enc) }}
  MYSQL_ROOT_PASSWORD: {{ $jwtSecret | quote }}